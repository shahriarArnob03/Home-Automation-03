#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// Wi-Fi credentials
const char* ssid = "T R I N I T Y"; 
const char* password = "Shihab007!2#4%";

// Pin assignments
const int light1Pin = 4;
const int light2Pin = 5;
const int buzzerPin = 14;
const int motionSensorPin = 16;
const int light3Pin = 12;
const int light4Pin = 13;

// States
bool light1State = false;
bool light2State = false;
bool buzzerState = false;
bool motionSensorEnabled = false;
bool light3State = false;
bool light4State = false;

unsigned long lastMotionTime = 0; // Tracks last motion detection
const unsigned long motionTimeout = 15000; // 15 seconds

ESP8266WebServer server(80);

void setup() {
  Serial.begin(115200);

  // Pin setup
  pinMode(light1Pin, OUTPUT);
  pinMode(light2Pin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(motionSensorPin, INPUT);
  pinMode(light3Pin, OUTPUT);
  pinMode(light4Pin, OUTPUT);

  digitalWrite(light1Pin, LOW);
  digitalWrite(light2Pin, LOW);
  digitalWrite(buzzerPin, LOW);
  digitalWrite(light3Pin, LOW);
  digitalWrite(light4Pin, LOW);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWi-Fi connected.");
  Serial.println(WiFi.localIP());

  // Web server routes
  server.on("/", handleRoot);
  server.on("/toggleLight1", toggleLight1);
  server.on("/toggleLight2", toggleLight2);
  server.on("/toggleBuzzer", toggleBuzzer);
  server.on("/toggleMotionSensor", toggleMotionSensor);
  server.on("/toggleLight3", toggleLight3);
  server.on("/toggleLight4", toggleLight4);

  server.begin();
  Serial.println("Web server started.");
}

void loop() {
  server.handleClient();

  // Motion sensor logic for Room 1
  if (motionSensorEnabled) {
    if (digitalRead(motionSensorPin) == HIGH) {
      // Motion detected
       Serial.println("Motion High");
      lastMotionTime = millis();
      digitalWrite(light1Pin, HIGH);
      digitalWrite(light2Pin, HIGH);

      if (!buzzerState) {
        Serial.println("Buzzer High");
        digitalWrite(buzzerPin, HIGH);
        delay(5000);
        digitalWrite(buzzerPin, LOW);
      }
    } else if (millis() - lastMotionTime > motionTimeout) {
      // No motion detected for the timeout duration
       Serial.println("No Motion Turning Lights Off");
      digitalWrite(light1Pin, LOW);
      digitalWrite(light2Pin, LOW);
    }
  }
}

// Web page content
String generateHTML() {
  String html = "<!DOCTYPE html><html><head><title>Smart Home</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #070313; color: #ffffff; }";
  html += "header { background: #1f1f1f; color: #ff7c11; text-align: center; padding: 1em; }";
  html += "main { padding: 20px; display: flex; flex-direction: column; align-items: center; }";
  html += "section { width: 100%; margin: 20px; background: #1e1e1e; border-radius: 5px; padding: 20px; }";
  html += ".switch-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; }";
  html += ".switch-card { background-color: #2a2a2a; border-radius: 10px; padding: 15px; text-align: center; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); transition: transform 0.3s; }";
  html += ".switch-card:hover { transform: translateY(-5px); }";
  html += "button { padding: 10px; background: #09327e; color: white; border: none; border-radius: 5px; cursor: pointer; margin-top: 10px; width: 100%; }";
  html += "button:hover { background: #45a049; }";
  html += "span { display: block; margin-top: 10px; font-size: 14px; color: #aaa; }";
  html += "</style></head><body>";
  
  html += "<header><h1>Smart Home Control</h1></header>";
  html += "<main>";

  // Room 1 Controls
  html += "<section><h2>Room 1</h2><div class='switch-grid'>";
  html += "<div class='switch-card'><h3>Light 1</h3><button id='btnLight1' onclick=\"toggle('toggleLight1')\">Toggle Light 1</button><span id='light1-status'>" + String(light1State ? "On" : "Off") + "</span></div>";
  html += "<div class='switch-card'><h3>Light 2</h3><button id='btnLight2' onclick=\"toggle('toggleLight2')\">Toggle Light 2</button><span id='light2-status'>" + String(light2State ? "On" : "Off") + "</span></div>";
  html += "<div class='switch-card'><h3>Buzzer</h3><button id='btnBuzzer' onclick=\"toggle('toggleBuzzer')\">Toggle Buzzer</button><span id='buzzer-status'>" + String(buzzerState ? "On" : "Off") + "</span></div>";
  html += "<div class='switch-card'><h3>Motion Sensor</h3><button id='btnMotionSensor' onclick=\"toggle('toggleMotionSensor')\">Toggle Motion Sensor</button><span id='motion-sensor-status'>" + String(motionSensorEnabled ? "Active" : "Inactive") + "</span></div>";
  html += "</div></section>";

  // Room 2 Controls
  html += "<section><h2>Room 2</h2><div class='switch-grid'>";
  html += "<div class='switch-card'><h3>Light 1</h3><button id='btnLight3' onclick=\"toggle('toggleLight3')\">Toggle Light 1</button><span id='room2-light1-status'>" + String(light3State ? "On" : "Off") + "</span></div>";
  html += "<div class='switch-card'><h3>Light 2</h3><button id='btnLight4' onclick=\"toggle('toggleLight4')\">Toggle Light 2</button><span id='room2-light2-status'>" + String(light4State ? "On" : "Off") + "</span></div>";
  html += "</div></section>";

  html += "</main><script>";
  html += "function toggle(endpoint) { fetch('/' + endpoint).then(response => response.text()).then(text => {";
  
  // After each toggle action, the corresponding button state will be updated dynamically without reloading the entire page.
  html += "    if (endpoint == 'toggleLight1') {";
  html += "      document.getElementById('light1-status').innerText = document.getElementById('light1-status').innerText == 'Off' ? 'On' : 'Off';";
  html += "      document.getElementById('btnLight1').innerText = document.getElementById('btnLight1').innerText == 'Toggle Light 1' ? 'Toggle Light 1' : 'Toggle Light 1';";
  html += "    } else if (endpoint == 'toggleLight2') {";
  html += "      document.getElementById('light2-status').innerText = document.getElementById('light2-status').innerText == 'Off' ? 'On' : 'Off';";
  html += "    } else if (endpoint == 'toggleBuzzer') {";
  html += "      document.getElementById('buzzer-status').innerText = document.getElementById('buzzer-status').innerText == 'Off' ? 'On' : 'Off';";
  html += "    } else if (endpoint == 'toggleMotionSensor') {";
  html += "      document.getElementById('motion-sensor-status').innerText = document.getElementById('motion-sensor-status').innerText == 'Inactive' ? 'Active' : 'Inactive';";
  html += "    } else if (endpoint == 'toggleLight3') {";
  html += "      document.getElementById('room2-light1-status').innerText = document.getElementById('room2-light1-status').innerText == 'Off' ? 'On' : 'Off';";
  html += "    } else if (endpoint == 'toggleLight4') {";
  html += "      document.getElementById('room2-light2-status').innerText = document.getElementById('room2-light2-status').innerText == 'Off' ? 'On' : 'Off';";
  html += "    }";
  
  html += "  }).catch(error => console.log('Error:', error)); }";
  html += "</script></body></html>";

  return html;
}


// Web handlers
void handleRoot() {
  server.send(200, "text/html", generateHTML());
}

void toggleLight1() {
  if (!motionSensorEnabled) {
    light1State = !light1State;
    digitalWrite(light1Pin, light1State ? HIGH : LOW);
  }
    Serial.println("Light1 Toggled");

  server.send(200, "text/plain", "OK");
}

void toggleLight2() {
  if (!motionSensorEnabled) {
    light2State = !light2State;
    digitalWrite(light2Pin, light2State ? HIGH : LOW);
  }
    Serial.println("Light2 Toggled");

  server.send(200, "text/plain", "OK");
}

void toggleBuzzer() {
  buzzerState = !buzzerState;
    Serial.println("buzzer Toggled");
  server.send(200, "text/plain", "OK");
}

void toggleMotionSensor() {
  motionSensorEnabled = !motionSensorEnabled;

  if (!motionSensorEnabled) {
    // Reset lights to manual mode
    digitalWrite(light1Pin, light1State ? HIGH : LOW);
    digitalWrite(light2Pin, light2State ? HIGH : LOW);
  }
  server.send(200, "text/plain", "OK");
}

void toggleLight3() {
  light3State = !light3State;
  digitalWrite(light3Pin, light3State ? HIGH : LOW);
    Serial.println("Light3 Toggled");

  server.send(200, "text/plain", "OK");
}

void toggleLight4() {
  light4State = !light4State;
  digitalWrite(light4Pin, light4State ? HIGH : LOW);
    Serial.println("Light4 Toggled");
  server.send(200, "text/plain", "OK");
}
